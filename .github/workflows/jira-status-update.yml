name: Update Jira Status on PR Merge - NO production Bugs Workflow (Noosh One)

on:
  pull_request:
    types: [closed]
    branches:
      - custom-qa
      - custom
      - release

jobs:
  update-jira:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Extract Jira Issue Key
        id: jira-key
        run: |
          JIRA_KEY=$(echo "${{ github.event.pull_request.title }}" | grep -o '[A-Z]\+-[0-9]\+' | head -1)
          if [ -z "$JIRA_KEY" ]; then
            JIRA_KEY=$(echo "${{ github.event.pull_request.head.ref }}" | grep -o '[A-Z]\+-[0-9]\+' | head -1)
          fi
          echo "key=$JIRA_KEY" >> $GITHUB_OUTPUT

      - name: Update Jira Status
        if: steps.jira-key.outputs.key != ''
        run: |
          BRANCH="${{ github.event.pull_request.base.ref }}"
          JIRA_KEY="${{ steps.jira-key.outputs.key }}"
          
          echo "üîç Processing: Branch=$BRANCH, Jira Key=$JIRA_KEY"
          
          # Get issue details to check project and workflow
          echo "üîç Getting issue details for project and workflow validation..."
          issue_details=$(curl -s -H "Authorization: Basic ${{ secrets.JIRA_API_TOKEN }}" \
            "${{ secrets.JIRA_BASE_URL }}/rest/api/2/issue/$JIRA_KEY?fields=project,status")
          
          project_key=$(echo "$issue_details" | jq -r '.fields.project.key')
          current_status=$(echo "$issue_details" | jq -r '.fields.status.name')
          
          echo "üìã Project: $project_key, Current Status: $current_status"
          
          # Check if this is for NOOSH ONE project
          if [ "$project_key" != "NOOSH ONE" ]; then
            echo "‚ö†Ô∏è  Skipping: This workflow only applies to NOOSH ONE project (current: $project_key)"
            exit 0
          fi
          
          # Get workflow information
          echo "üîÑ Getting workflow information..."
          workflow_info=$(curl -s -H "Authorization: Basic ${{ secrets.JIRA_API_TOKEN }}" \
            "${{ secrets.JIRA_BASE_URL }}/rest/api/2/issue/$JIRA_KEY/transitions")
          
          workflow_name=$(echo "$workflow_info" | jq -r '.transitions[0].fields // empty | keys[] as $k | .[$k] | select(has("allowedValues")) | .allowedValues[] | select(has("name")) | .name' | head -1)
          
          # Check if workflow is TEST (exclude TEST workflow)
          if [[ "$current_status" == *"TEST"* ]] || [[ "$workflow_name" == *"TEST"* ]]; then
            echo "‚ö†Ô∏è  Skipping: This workflow excludes TEST workflows (current status: $current_status)"
            exit 0
          fi
          
          echo "‚úÖ Validated: NOOSH ONE project, non-TEST workflow"
          
          case $BRANCH in
            "custom-qa")
              STATUS="FIXED IN QA"
              ;;
            "custom")
              STATUS="FIXED IN UAT"
              ;;
            "release")
              STATUS="FIXED IN STAGE"
              ;;
          esac
          
          echo "üìã Target status: $STATUS"
          
          # First, test basic authentication
          echo "üîê Testing Jira authentication..."
          auth_test=$(curl -s -w "%{http_code}" -H "Authorization: Basic ${{ secrets.JIRA_API_TOKEN }}" \
            "${{ secrets.JIRA_BASE_URL }}/rest/api/2/myself" -o /dev/null)
          
          if [ "$auth_test" != "200" ]; then
            echo "‚ùå Authentication failed: HTTP $auth_test"
            exit 1
          fi
          echo "‚úÖ Authentication successful"
          
          # Get available transitions
          echo "üîÑ Getting available transitions for $JIRA_KEY..."
          transitions_response=$(curl -s -H "Authorization: Basic ${{ secrets.JIRA_API_TOKEN }}" \
            "${{ secrets.JIRA_BASE_URL }}/rest/api/2/issue/$JIRA_KEY/transitions")
          
          echo "üìù Available transitions: $transitions_response"
          
          # Find transition ID
          transition_id=$(echo "$transitions_response" | jq -r ".transitions[] | select(.name==\"$STATUS\") | .id")
          
          if [ -z "$transition_id" ] || [ "$transition_id" = "null" ]; then
            echo "‚ùå Status '$STATUS' not found in available transitions"
            echo "Available statuses:"
            echo "$transitions_response" | jq -r '.transitions[].name'
            exit 1
          fi
          
          echo "üéØ Found transition ID: $transition_id"
          
          # Perform the transition
          echo "‚ö° Updating Jira status..."
          result=$(curl -s -w "%{http_code}" -X POST \
            -H "Authorization: Basic ${{ secrets.JIRA_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"transition\":{\"id\":\"$transition_id\"}}" \
            "${{ secrets.JIRA_BASE_URL }}/rest/api/2/issue/$JIRA_KEY/transitions" \
            -o /tmp/response.json)
          
          if [ "$result" = "204" ]; then
            echo "‚úÖ Successfully updated $JIRA_KEY to $STATUS"
          else
            echo "‚ùå Transition failed: HTTP $result"
            cat /tmp/response.json
            exit 1
          fi
