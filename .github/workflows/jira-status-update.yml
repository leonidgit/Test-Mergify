name: Update Jira Status on PR Merge

on:
  pull_request:
    types: [closed]
    branches:
      - release
      - custom
      - custom-qa
  workflow_dispatch:

jobs:
  update-jira:
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Extract Jira Issue Key
        id: jira-key
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            JIRA_KEY="NO-18109"
          else
            JIRA_KEY=$(echo "${{ github.event.pull_request.title }}" | grep -o '[A-Z]\+-[0-9]\+' | head -1)
            if [ -z "$JIRA_KEY" ]; then
              JIRA_KEY=$(echo "${{ github.event.pull_request.head.ref }}" | grep -o '[A-Z]\+-[0-9]\+' | head -1)
            fi
          fi
          echo "key=$JIRA_KEY" >> $GITHUB_OUTPUT

      - name: Update Jira Status
        if: steps.jira-key.outputs.key != ''
        run: |
          BRANCH="${{ github.event.pull_request.base.ref }}"
          JIRA_KEY="${{ steps.jira-key.outputs.key }}"
          
          echo "Processing: $JIRA_KEY for branch $BRANCH"
          
          # Test different authentication methods
          echo "Testing Jira authentication methods..."
          
          # Method 1: JIRA_USER_EMAIL:JIRA_API_TOKEN
          echo "Method 1: email:token"
          auth_test1=$(curl -s -w "%{http_code}" $AUTH_METHOD \
            "${{ secrets.JIRA_BASE_URL }}/rest/api/2/myself" -o /dev/null)
          echo "Method 1 result: $auth_test1"
          
          # Method 2: Check if JIRA_TOKEN exists (different name)
          if [ -n "${{ secrets.JIRA_TOKEN }}" ]; then
            echo "Method 2: email:JIRA_TOKEN"
            auth_test2=$(curl -s -w "%{http_code}" -u "${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_TOKEN }}" \
              "${{ secrets.JIRA_BASE_URL }}/rest/api/2/myself" -o /dev/null)
            echo "Method 2 result: $auth_test2"
          fi
          
          # Method 3: Check if JIRA_EMAIL exists (different name)
          if [ -n "${{ secrets.JIRA_EMAIL }}" ]; then
            echo "Method 3: JIRA_EMAIL:token"
            auth_test3=$(curl -s -w "%{http_code}" -u "${{ secrets.JIRA_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}" \
              "${{ secrets.JIRA_BASE_URL }}/rest/api/2/myself" -o /dev/null)
            echo "Method 3 result: $auth_test3"
          fi
          
          # Use the working method
          if [ "$auth_test1" = "200" ]; then
            echo "Using Method 1"
            AUTH_METHOD="-u ${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}"
          elif [ -n "${{ secrets.JIRA_TOKEN }}" ] && [ "$auth_test2" = "200" ]; then
            echo "Using Method 2"
            AUTH_METHOD="-u ${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_TOKEN }}"
          elif [ -n "${{ secrets.JIRA_EMAIL }}" ] && [ "$auth_test3" = "200" ]; then
            echo "Using Method 3"
            AUTH_METHOD="-u ${{ secrets.JIRA_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}"
          else
            echo "All authentication methods failed"
            exit 1
          fi
          
          echo "Authentication successful"
          
          # Get issue details
          issue_response=$(curl -s $AUTH_METHOD \
            "${{ secrets.JIRA_BASE_URL }}/rest/api/2/issue/$JIRA_KEY?fields=project,status")
          
          echo "Issue response: $issue_response"
          
          project_key=$(echo "$issue_response" | jq -r '.fields.project.key')
          
          # Check if it's NO project (NOOSH ONE)
          if [ "$project_key" != "NO" ]; then
            echo "Skipping: Only for NO project (current: $project_key)"
            exit 0
          fi
          
          # Set status based on branch
          case $BRANCH in
            "custom-qa")
              STATUS="FIXED IN QA"
              ;;
            "custom")
              STATUS="FIXED IN UAT"
              ;;
            "release")
              STATUS="FIXED IN STAGE"
              ;;
          esac
          
          echo "Target status: $STATUS"
          
          # Get available transitions
          transitions_response=$(curl -s $AUTH_METHOD \
            "${{ secrets.JIRA_BASE_URL }}/rest/api/2/issue/$JIRA_KEY/transitions")
          
          # Find transition ID
          transition_id=$(echo "$transitions_response" | jq -r ".transitions[] | select(.name==\"$STATUS\") | .id")
          
          if [ -z "$transition_id" ] || [ "$transition_id" = "null" ]; then
            echo "Status '$STATUS' not found"
            exit 1
          fi
          
          # Perform transition
          curl -X POST \
            $AUTH_METHOD \
            -H "Content-Type: application/json" \
            -d "{\"transition\":{\"id\":\"$transition_id\"}}" \
            "${{ secrets.JIRA_BASE_URL }}/rest/api/2/issue/$JIRA_KEY/transitions"
          
          echo "Successfully updated $JIRA_KEY to $STATUS"